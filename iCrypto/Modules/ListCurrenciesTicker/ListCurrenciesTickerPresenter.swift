//
//  ListCurrenciesTickerPresenter.swift
//  iCrypto
//
//  Created by Nguyen Nghia on 8/31/20.
//  Copyright (c) 2020 Nghia Nguyen. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import Foundation
import RxSwift

final class ListCurrenciesTickerPresenter {
    // MARK: - Private properties -

    private unowned let view: ListCurrenciesTickerViewInterface
    private let interactor: ListCurrenciesTickerInteractorInterface
    private let wireframe: ListCurrenciesTickerWireframeInterface

    private(set) var currenciesTickers: [CurrenciesTicker] = []
    private let disposeBag = DisposeBag()

    // MARK: - Lifecycle -

    init(view: ListCurrenciesTickerViewInterface, interactor: ListCurrenciesTickerInteractorInterface, wireframe: ListCurrenciesTickerWireframeInterface) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
    }
}

// MARK: - Extensions -

extension ListCurrenciesTickerPresenter: ListCurrenciesTickerPresenterInterface {
    func getListCurrenciesTicker() {
        interactor.getListCurrenciesTicker().subscribe(onNext: { [weak self] response in
            self?.currenciesTickers = response
            self?.view.reloadData()
        }, onError: { [weak self] error in
            self?.view.showErrorPopup(message: error.localizedDescription)
        }).disposed(by: disposeBag)
    }

    func numberOfSections() -> Int {
        return 1
    }

    func numberOrItems(in section: Int) -> Int {
        return currenciesTickers.count
    }

    func item(at indexPath: IndexPath) -> CurrenciesTicker? {
        return currenciesTickers[indexPath.row]
    }

    func didSelectItem(at indexPath: IndexPath) {}
}
