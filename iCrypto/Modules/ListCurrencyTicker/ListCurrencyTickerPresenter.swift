//
//  ListCurrencyTickerPresenter.swift
//  iCrypto
//
//  Created by Nguyen Nghia on 8/31/20.
//  Copyright (c) 2020 Nghia Nguyen. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import Foundation
import RxSwift
import Domain

final class ListCurrencyTickerPresenter {
    // MARK: - Private properties -

    private unowned let view: ListCurrencyTickerViewInterface
    private let interactor: ListCurrencyTickerInteractorInterface
    private let wireframe: ListCurrencyTickerWireframeInterface

    private(set) var currencyTickers: [CurrencyTicker] = []
    private let disposeBag = DisposeBag()

    // MARK: - Lifecycle -

    init(view: ListCurrencyTickerViewInterface, interactor: ListCurrencyTickerInteractorInterface, wireframe: ListCurrencyTickerWireframeInterface) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
    }
}

// MARK: - Extensions -

extension ListCurrencyTickerPresenter: ListCurrencyTickerPresenterInterface {
    func getListCurrencyTicker() {
        interactor.getListCurrencyTicker(currencySymbols: ["BTC", "ETH", "XLM"]).subscribe(onNext: { [weak self] response in
            self?.currencyTickers = response
            self?.view.reloadData()
        }, onError: { [weak self] error in
            self?.view.showErrorPopup(message: error.localizedDescription)
        }).disposed(by: disposeBag)
    }

    func numberOfSections() -> Int {
        return 1
    }

    func numberOrItems(in section: Int) -> Int {
        return currencyTickers.count
    }

    func item(at indexPath: IndexPath) -> CurrencyTicker? {
        return currencyTickers[indexPath.row]
    }

    func didSelectItem(at indexPath: IndexPath) {}
}
